/**
* This code was generated by v0 by Vercel.
* @see https://v0.dev/t/rrwATjQCOMJ
* Documentation: https://v0.dev/docs#integrating-generated-code-into-your-nextjs-app
*/

/** Add fonts into your Next.js project:

import { Inter } from 'next/font/google'

inter({
  subsets: ['latin'],
  display: 'swap',
})

To read more about using these font, please visit the Next.js documentation:
- App Directory: https://nextjs.org/docs/app/building-your-application/optimizing/fonts
- Pages Directory: https://nextjs.org/docs/pages/building-your-application/optimizing/fonts
**/
"use client"

import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { useState } from "react"

export function IdConvertForm() {
  const [inputValue, setInputValue] = useState("")
  const [convertedValue, setConvertedValue] = useState("")
  const handleInputChange = (e) => {
    setInputValue(e.target.value)
  }
  const handleConvert = () => {
    if (inputValue.length < 10) {
      alert('please input value more than 10 length!');
      return;
    }

    const convertedValue = inputValue.toUpperCase()

    const substring = convertedValue.substring(0, 10)

    const transformedChars = substring.split('').map(char => {
      switch (char) {
        case '0':
          return '#';
        case '1':
          return '9';
        case '2':
          return 'A';
        case '3':
          return 'g';
        case '4':
          return '1';
        case '5':
          return 'y';
        case '6':
          return '5';
        case '7':
          return 'j';
        case '8':
          return '7';
        case '9':
          return 'C';
        default:
          return '';
      }
    });

    setConvertedValue(transformedChars.join(''))
  }

  const handleKeyDown = (e) => {
    if (e.key === "Enter") {
      handleConvert()
    }
  }
  return (
    <div className="flex flex-col items-center justify-center h-screen bg-background">
      <div className="bg-card p-8 rounded-lg shadow-md w-full max-w-md">
        <h1 className="text-2xl font-bold mb-4 text-card-foreground">ID Converter</h1>
        <div className="flex items-center mb-4">
          <Input
            type="text"
            value={inputValue}
            onChange={handleInputChange}
            onKeyDown={handleKeyDown}
            placeholder="Enter a value"
            className="flex-1 mr-4 bg-input text-input-foreground rounded-md px-4 py-2 focus:outline-none focus:ring-2 focus:ring-primary focus:border-transparent"
          />
          <Button
            onClick={handleConvert}
            className="bg-primary text-primary-foreground rounded-md px-4 py-2 hover:bg-primary/90 focus:outline-none focus:ring-2 focus:ring-primary focus:border-transparent"
          >
            Enter!
          </Button>
        </div>
        <div className="bg-card-foreground text-card p-4 rounded-md">
          <p>Converted: {convertedValue}</p>
        </div>
      </div>
    </div>
  )
}
